@page "/catalog"

<PageTitle>Каталог вин</PageTitle>

@using WineSales.Domain.Interactors

@inject IUserInteractor UserInteractor
@inject ISupplierWineInteractor SupplierWineInteractor
@inject ISupplierInteractor SupplierInteractor

<Jumbotron Background="Background.Light" Margin="Margin.Is4.FromBottom">
    <JumbotronTitle Size="JumbotronTitleSize.Is4">Каталог вин</JumbotronTitle>
    <Divider></Divider>
</Jumbotron>

<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Сорт</TableHeaderCell>
            <TableHeaderCell>Цвет</TableHeaderCell>
            <TableHeaderCell>Объем (л)</TableHeaderCell>
            <TableHeaderCell>Сахар</TableHeaderCell>
            <TableHeaderCell>Алкоголь (%)</TableHeaderCell>
            <TableHeaderCell>Выдержка (лет)</TableHeaderCell>
            <TableHeaderCell>Цена (₽)</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @for (int i = 0; i < wines.Count; i++)
        {
            <OneCatalogWine OneWine="wines[i]" OnePrice="prices[i]" SupplierWineID="ids[i]" OneSupplier="suppliers[i]" Full=withButton></OneCatalogWine>
        }
    </TableBody>
</Table>

@code {
    private List<int> ids = new List<int>();
    private List<Wine>? wines = new List<Wine>();
    private List<Double>? prices = new List<double>();
    private List<Supplier> suppliers = new List<Supplier>();
    private List<double> points = new List<Double>();

    private bool withButton = false;

    protected override void OnInitialized()
    {
        Log.Debug("GetNowUser() called.");
        User nowUser = UserInteractor.GetNowUser();

        if (nowUser.Role == "customer")
        {
            withButton = true;
        }

        Log.Debug("GetAllWine() called.");
        (ids, wines, prices) = SupplierWineInteractor.GetAllWine();

        foreach (var id in ids)
        {
            Supplier supplier = SupplierInteractor.GetBySupplierWineID(id);
            suppliers.Add(supplier);
        }

        Log.Information("WineCatalog initialized.");
        base.OnInitialized();
    }
}
