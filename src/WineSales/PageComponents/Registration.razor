@inject NavigationManager NavigationManager
@inject WineSales.Domain.Interactors.IUserInteractor UserInteractor

<Modal @ref="registrationModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Регистрация</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
        <Validations @ref="@registrationValidations" ValidateOnLoad=false>
            <Validation @ref="@loginValidation" Validator="@ValidateLogin">
                <Field>
                    <FieldLabel>Логин</FieldLabel>
                    <TextEdit @bind-Text="@loginDetails.Login" Placeholder="Введите логин...">
                        <Feedback>
                            <ValidationSuccess>Отлично!</ValidationSuccess> 
                            <ValidationError>@loginErrorMsg</ValidationError> 
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Validation @ref="@passwordValidation" Validator="@ValidatePassword">
                <Field>
                    <FieldLabel>Пароль</FieldLabel>
                    <TextEdit @bind-Text="@loginDetails.Password" Placeholder="Введите пароль...">
                        <Feedback>
                            <ValidationSuccess>Отлично!</ValidationSuccess> 
                            <ValidationError>@passwordErrorMsg</ValidationError> 
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
        </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Отменить</Button>
            <Button Color="Color.Primary" Clicked="@Register">Зарегистрироваться</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal? registrationModal;

    LoginDetails loginDetails = new LoginDetails();

    Validations? registrationValidations;

    Validation? loginValidation;
    string loginErrorMsg = "";
    bool invalidLogin = false;

    Validation? passwordValidation;
    string passwordErrorMsg = "";
    bool invalidPassword = false;

    public void ShowModal()
    {
        registrationModal.Show();
    }

    async Task Register()
    {
        if (await registrationValidations.ValidateAll())
        {
            Console.WriteLine("SignIn");

            try
            {
                UserInteractor.SignIn(loginDetails);
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
                await registrationValidations.ClearAll();
            }
            catch(UserException ex)
            {
                var errorMsg = ex.Message;
                Console.WriteLine("SignIn: error");
                Console.WriteLine(errorMsg);

                if (errorMsg == "User: This user doesn't exist.")
                {
                    Console.WriteLine("SignIn: error with login");
                    invalidLogin = true;
                    await registrationValidations.ValidateAll();
                }
                else if (errorMsg == "User: Invalid input of password." || errorMsg == "User: Invalid password.")
                {
                    Console.WriteLine("SignIn: error with password");
                    invalidPassword = true;
                    await registrationValidations.ValidateAll();
                }
            }
        }
    }

    void ValidateLogin(ValidatorEventArgs fact)
    {
        Console.WriteLine("ValidateLogin");

        if (invalidLogin)
        {
            Console.WriteLine("ValidateLogin: invalid login");
            loginErrorMsg = "Неверный логин.";
            fact.Status = ValidationStatus.Error;
            invalidLogin = false;
        }
        else
        {
            var login = Convert.ToString(fact.Value);

            if (string.IsNullOrEmpty(login))
            {
                loginErrorMsg = "Неверный логин.";
                fact.Status = ValidationStatus.Error;
            }
            else
            {
                fact.Status = ValidationStatus.Success;
            }
        }
    }

    void ValidatePassword(ValidatorEventArgs fact)
    {
        Console.WriteLine( "ValidatePassword");

        if (invalidPassword)
        {
            Console.WriteLine("ValidatePassword: invalid password");
            passwordErrorMsg = "Неверный пароль.";
            fact.Status = ValidationStatus.Error;
            invalidPassword = false;
        }
        else
        {
            var password = Convert.ToString(fact.Value);

            if (string.IsNullOrEmpty(password))
            {
                passwordErrorMsg = "Неверный пароль.";
                fact.Status = ValidationStatus.Error;
            }
            else
            {
                fact.Status = ValidationStatus.Success;
            }
        }
    }

    private Task HideModal()
    {
        return registrationModal.Hide();
    }
}