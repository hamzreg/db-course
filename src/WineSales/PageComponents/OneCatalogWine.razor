@using WineSales.Config
@using WineSales.Domain.Interactors

@inject IUserInteractor UserInteractor
@inject IPurchaseInteractor PurchaseInteractor
@inject ISaleInteractor SaleInteractor
@inject ISupplierWineInteractor SupplierWineInteractor

<Modal @ref="supplierInfoModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Информация о поставщике @OneSupplier.Name</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <ListGroup Flush>
                <ListGroupItem Disabled>Страна: @OneSupplier.Country</ListGroupItem>
                <ListGroupItem Disabled>Опыт: @OneSupplier.Experience (лет)</ListGroupItem>

                @if (@OneSupplier.License)
                {
                    <ListGroupItem Disabled>Лицензия: есть</ListGroupItem>
                }
                else
                {
                    <ListGroupItem Disabled>Лицензия: нет</ListGroupItem>
                }
            </ListGroup>
        </ModalBody>
        <ModalFooter>
        </ModalFooter>
    </ModalContent>
</Modal>

<TableRow>
    <TableRowCell>@OneWine.Kind</TableRowCell>
    <TableRowCell>@OneWine.Color</TableRowCell>
    <TableRowCell>@OneWine.Volume</TableRowCell>
    <TableRowCell>@OneWine.Sugar</TableRowCell>
    <TableRowCell>@OneWine.Alcohol</TableRowCell>
    <TableRowCell>@OneWine.Aging</TableRowCell>
    <TableRowCell>@OnePrice</TableRowCell>
</TableRow>

@if (@Full)
{
    <Bar Breakpoint="Breakpoint.Desktop"
         ThemeContrast="ThemeContrast.Light">
        <BarToggler />
        <BarMenu>
            <BarStart>
                <BarItem>
                    <Button Color="Color.Primary" Clicked="@GetSupplierInfo">О поставщике</Button>
                    <Button Color="Color.Primary" Clicked="@BuyWine">Купить</Button>
                </BarItem>
            </BarStart>
        </BarMenu>
    </Bar>
}

@code {
    [Parameter] public Wine OneWine { get; set; }
    [Parameter] public double OnePrice { get; set; }
    [Parameter] public int SupplierWineID { get; set; }
    [Parameter] public Supplier OneSupplier { get; set; }
    [Parameter] public bool Full { get; set; }

    private Modal? supplierInfoModal;

    private void GetSupplierInfo()
    {
        Log.Information("Button <GetSupplierInfo> clicked.");
        supplierInfoModal.Show();
    }

    private Task BuyWine()
    {
        Log.Information("Button <BuyWine> clicked.");

        User nowUser = UserInteractor.GetNowUser();

        Purchase purchase = new Purchase
        {
            Price = OnePrice,
            Status = (int)PurchaseConfig.Statuses.Active,
            CustomerID = nowUser.RoleID
        };
        PurchaseInteractor.CreatePurchase(purchase);
        Purchase createdPurchase = PurchaseInteractor.GetActive(nowUser.RoleID, OnePrice);

        SupplierWine supplierWine = SupplierWineInteractor.GetByID(SupplierWineID);

        var nowDate = Convert.ToString(DateTime.Now.ToShortDateString());
        string[] strNowDate = nowDate.Split('.');

        Sale sale = new Sale
        {
            PurchasePrice = OnePrice,
            Costs = SaleConfig.MinCosts,
            WineNumber = WineConfig.MinNumber,
            Date = new DateOnly(Convert.ToInt32(strNowDate[2]), 
                                Convert.ToInt32(strNowDate[1]),
                                Convert.ToInt32(strNowDate[0])),
            PurchaseID = createdPurchase.ID,
            SupplierWineID = SupplierWineID
        };

        SaleInteractor.CreateSale(sale, supplierWine.Percent);

        return Task.CompletedTask;
    }
}
