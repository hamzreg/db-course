@using WineSales.Config
@using WineSales.Domain.Interactors

@inject NavigationManager NavigationManager
@inject IWineInteractor WineInteractor
@inject ISupplierWineInteractor SupplierWineInteractor

<Modal @ref="updateWineModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Изменение вина</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
        <Validations @ref="@wineValidations" ValidateOnLoad=false>
            <Validation @ref="@priceValidation" Validator="@ValidatePrice">
                <Field>
                    <FieldLabel>Цена (₽)</FieldLabel>
                    <NumericEdit @bind-Value="@SupplierWineItem.Price" Placeholder="Введите цену...">
                        <Feedback>
                            <ValidationSuccess>Отлично!</ValidationSuccess> 
                            <ValidationError>@priceErrorMsg</ValidationError> 
                        </Feedback>
                    </NumericEdit>
                </Field>
            </Validation>
            <Validation @ref="@percentValidation" Validator="@ValidatePercent">
                <Field>
                    <FieldLabel>Процент</FieldLabel>
                    <NumericEdit @bind-Value="@SupplierWineItem.Percent" Placeholder="Введите процент...">
                        <Feedback>
                            <ValidationSuccess>Отлично!</ValidationSuccess> 
                            <ValidationError>@percentErrorMsg</ValidationError> 
                        </Feedback>
                    </NumericEdit>
                </Field>
            </Validation>
        </Validations>

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Отменить</Button>
            <Button Color="Color.Primary" Clicked="@UpdateWine">Изменить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<TableRow>
    <TableRowCell>@OneWine.Kind</TableRowCell>
    <TableRowCell>@OneWine.Color</TableRowCell>
    <TableRowCell>@OneWine.Volume</TableRowCell>
    <TableRowCell>@OneWine.Sugar</TableRowCell>
    <TableRowCell>@OneWine.Alcohol</TableRowCell>
    <TableRowCell>@OneWine.Aging</TableRowCell>
    <TableRowCell>@SupplierWineItem.Percent</TableRowCell>
    <TableRowCell>@SupplierWineItem.Price</TableRowCell>
</TableRow>
<Bar Breakpoint="Breakpoint.Desktop"
    ThemeContrast="ThemeContrast.Light">
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <Button Color="Color.Danger" Clicked="DeleteWine">Удалить вино</Button>
                <Button Color="Color.Primary" Clicked="ShowModal">Редактировать вино</Button>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

@code {
    [Parameter] public Wine OneWine { get; set; }
    [Parameter] public SupplierWine SupplierWineItem { get; set; }

    private Modal? updateWineModal;

    Validations? wineValidations;

    Validation? priceValidation;
    string priceErrorMsg = "";

    Validation? percentValidation;
    string percentErrorMsg = "";

    public Task ShowModal()
    {
        updateWineModal.Show();
        return Task.CompletedTask;
    }

    async Task UpdateWine()
    {
        if (await wineValidations.ValidateAll())
        {
            try
            {
                SupplierWineInteractor.UpdateSupplierWine(SupplierWineItem);

                NavigationManager.NavigateTo(NavigationManager.Uri, true);
                await wineValidations.ClearAll();
            }
            catch(SupplierWineException ex)
            {
                var errorMsg = ex.Message;

                if (errorMsg == "SupplierWine: This supplier doesn't have this wine.")
                {
                    wineValidations.ValidateAll();
                }
            }
        }
    }

    void ValidatePercent(ValidatorEventArgs fact)
    {
        var strPercent = Convert.ToString(fact.Value);
        var percent = Convert.ToInt32(strPercent);

        if (percent == 0)
        {
            percentErrorMsg = "Необходимо ввести процент.";
            fact.Status = ValidationStatus.Error;
        }
        else if (percent < SaleConfig.MinPercent)
        {
            percentErrorMsg = "Процент должен быть не менее 43 %.";
            fact.Status = ValidationStatus.Error;
        }
        else
        {
            fact.Status = ValidationStatus.Success;
        }
    }

    void ValidatePrice(ValidatorEventArgs fact)
    {
        var price = Convert.ToDouble(fact.Value);

        if (price == 0)
        {
            priceErrorMsg = "Необходимо ввести цену вина.";
            fact.Status = ValidationStatus.Error;
        }
        else if (price < SaleConfig.MinPurchasePrice)
        {
            priceErrorMsg = "Цена вина должна быть не менее 118 ₽.";
            fact.Status = ValidationStatus.Error;
        }
        else
        {
            fact.Status = ValidationStatus.Success;
        }
    }

    private Task HideModal()
    {
        return updateWineModal.Hide();
    }

    private Task DeleteWine()
    {
        WineInteractor.DeleteWine(OneWine);
        SupplierWineInteractor.DeleteSupplierWine(SupplierWineItem);

        NavigationManager.NavigateTo(NavigationManager.Uri, true);
        return Task.CompletedTask;
    }
}
